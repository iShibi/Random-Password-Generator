{"version":3,"sources":["reportWebVitals.js","components/App.jsx","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","App","state","password","passwordLength","className","ref","pass","type","placeholder","value","this","readOnly","id","min","max","onChange","passwordLengthHandler","onClick","passwordHandler","copyPassword","resetHandler","document","getElementById","setState","passwordGenerator","el","focus","select","execCommand","blur","lowerCase","upperCase","digits","specialChar","Math","floor","random","length","limit","i","choice","Component","ReactDOM","render","StrictMode"],"mappings":"2LAYeA,G,MAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,Q,4BCiECQ,E,4MArEXC,MAAQ,CACJC,SAAU,GACVC,eAAgB,M,uDAGV,IAAD,OACL,OACI,sBAAKC,UAAU,YAAf,UACI,uBAAOC,IAAK,SAACC,GAAD,OAAU,EAAKA,KAAOA,GAAMC,KAAK,OAAOH,UAAU,iBAAiBI,YAAY,sCAAsCC,MAAOC,KAAKT,MAAMC,SAAUS,UAAQ,IACrK,sBAAKP,UAAU,aAAf,UACI,uBAAOG,KAAK,SAASK,GAAG,WAAWR,UAAU,kBAAkBS,IAAI,KAAKC,IAAI,KAAKL,MAAOC,KAAKT,MAAME,eAAgBY,SAAU,kBAAM,EAAKC,2BACxI,wBAAQT,KAAK,SAASH,UAAU,kBAAkBa,QAAS,kBAAM,EAAKC,gBAAgB,EAAKjB,MAAME,iBAAjG,sBACA,wBAAQI,KAAK,SAASH,UAAU,cAAca,QAAS,kBAAM,EAAKE,gBAAlE,kBACA,wBAAQZ,KAAK,SAASH,UAAU,eAAea,QAAS,kBAAM,EAAKG,gBAAnE,2B,8CAOZ,IACMjB,EADckB,SAASC,eAAe,YACTb,MACnCC,KAAKa,SAAS,CAAEpB,eAAgBA,M,sCAGpBA,GACZ,IAAMD,EAAWQ,KAAKc,kBAAkBrB,GACxCO,KAAKa,SAAS,CAAErB,SAAUA,M,qCAI1B,IAAMuB,EAAKf,KAAKJ,KAChBmB,EAAGC,QACHD,EAAGE,SACHN,SAASO,YAAY,QACrBH,EAAGI,S,qCAIHnB,KAAKa,SAAS,CAAErB,SAAU,GAAIC,eAAgB,S,wCAGhCA,GACd,IAAID,EAAW,GACT4B,EAAY,6BACZC,EAAY,6BACZC,EAAS,aACTC,EAAc,2BAEpB/B,GAAY4B,EAAUI,KAAKC,MAAMD,KAAKE,SAAWN,EAAUO,SAE3D,IADA,IAAIC,EAAQnC,EAAiB,EACpBoC,EAAI,EAAGA,EAAID,EAAOC,IAAK,CAC5B,IAAIC,EAASN,KAAKC,MAAsB,EAAhBD,KAAKE,UAEzBlC,GADW,IAAXsC,EACYP,EAAYC,KAAKC,MAAMD,KAAKE,SAAWH,EAAYI,SAC7C,IAAXG,EACKR,EAAOE,KAAKC,MAAMD,KAAKE,SAAWJ,EAAOK,SACnC,IAAXG,EACKT,EAAUG,KAAKC,MAAMD,KAAKE,SAAWL,EAAUM,SAE/CP,EAAUI,KAAKC,MAAMD,KAAKE,SAAWN,EAAUO,SAKnE,OAFAnC,GAAY6B,EAAUG,KAAKC,MAAMD,KAAKE,SAAWL,EAAUM,a,GAhEjDI,a,MCKlBC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFvB,SAASC,eAAe,SAM1B/B,M","file":"static/js/main.e0727bab.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { Component } from 'react';\r\n\r\nclass App extends Component {\r\n    state = {\r\n        password: '',\r\n        passwordLength: '16'\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className='container'>\r\n                <input ref={(pass) => this.pass = pass} type='text' className='password-field' placeholder='Random Password Will Appear Here...' value={this.state.password} readOnly></input>\r\n                <div className='user-input'>\r\n                    <input type='number' id='pass-len' className='password-length' min='16' max='32' value={this.state.passwordLength} onChange={() => this.passwordLengthHandler()}></input>\r\n                    <button type='submit' className='generate-button' onClick={() => this.passwordHandler(this.state.passwordLength)}>Generate</button>\r\n                    <button type='button' className='copy-button' onClick={() => this.copyPassword()}>Copy</button>\r\n                    <button type='button' className='reset-button' onClick={() => this.resetHandler()}>Reset</button>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    passwordLengthHandler() {\r\n        const lengthField = document.getElementById('pass-len');\r\n        const passwordLength = lengthField.value;\r\n        this.setState({ passwordLength: passwordLength });\r\n    }\r\n\r\n    passwordHandler(passwordLength) {\r\n        const password = this.passwordGenerator(passwordLength);\r\n        this.setState({ password: password });\r\n    }\r\n\r\n    copyPassword() {\r\n        const el = this.pass;\r\n        el.focus();\r\n        el.select();\r\n        document.execCommand('copy');\r\n        el.blur();\r\n    }\r\n\r\n    resetHandler() {\r\n        this.setState({ password: '', passwordLength: '16' });\r\n    }\r\n\r\n    passwordGenerator(passwordLength) {\r\n        let password = '';\r\n        const lowerCase = 'abcdefghijklmnopqrstuvwxyz';\r\n        const upperCase = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\r\n        const digits = '0123456789';\r\n        const specialChar = '#$%&()*+-./:;<=>?@[\\]^_{}';\r\n\r\n        password += lowerCase[Math.floor(Math.random() * lowerCase.length)];\r\n        let limit = passwordLength - 2;\r\n        for (let i = 0; i < limit; i++) {\r\n            let choice = Math.floor(Math.random() * 4);\r\n            if (choice === 0) {\r\n                password += specialChar[Math.floor(Math.random() * specialChar.length)];\r\n            } else if (choice === 1) {\r\n                password += digits[Math.floor(Math.random() * digits.length)];\r\n            } else if (choice === 2) {\r\n                password += upperCase[Math.floor(Math.random() * upperCase.length)];\r\n            } else {\r\n                password += lowerCase[Math.floor(Math.random() * lowerCase.length)];\r\n            }\r\n        }\r\n        password += upperCase[Math.floor(Math.random() * upperCase.length)];\r\n\r\n        return password;\r\n    }\r\n}\r\n\r\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport App from './components/App';\nimport './App.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}